import random
import string

def generate_password(length, strength):
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase
    digits = string.digits
    special_chars = string.punctuation

    password = []

    if strength == 'easy':
        password.append(random.choice(uppercase))
        password.append(random.choice(digits))
        password.append(random.choice(special_chars))
        for _ in range(length - 3):
            password.append(random.choice(lowercase))

    elif strength == 'moderate':
        password.append(random.choice(uppercase))
        password.append(random.choice(uppercase))
        password.append(random.choice(digits))
        password.append(random.choice(digits))
        password.append(random.choice(special_chars))
        for _ in range(length - 5):
            password.append(random.choice(lowercase))

    elif strength == 'high':
        all_chars = lowercase + uppercase + digits + special_chars
        password = [random.choice(all_chars) for _ in range(length)]

    random.shuffle(password)
    return ''.join(password)

def get_user_inputs():
    username = input("\nEnter your username: ")
    user_choice = input("If you want to create your own password then say YES.\nElse NO if you want it AUTOGENERATED: ").lower()

    if user_choice == 'yes':
        password = input("\nEnter your password: ")
        return username, password, 'custom'
    else:
        length = int(input("\nEnter the desired length of the password: "))
        strength = input("Enter the desired password strength (easy, moderate, high): ").lower()

        while strength not in ['easy', 'moderate', 'high']:
            strength = input("Invalid strength! Please enter easy, moderate, or high: ").lower()

        return username, length, strength

def save_password(username, password, password_dict):
    password_dict[username] = password
    with open("saved_passwords.txt", "a") as file:
        file.write(f"{username}: {password}\n")
    print("\nPassword saved successfully.")

def retrieve_password(username, password_dict):
    return password_dict.get(username, "No password found for this username.")

def main():
    password_dict = {}  

    while True:
        username, *rest = get_user_inputs()
        if len(rest) == 1:  
             password = rest[0]
        else:
            length, strength = rest
            password = generate_password(length, strength)
        
        print(f"Generated Password for {username}: {password}")
        
        password_dict[username] = password
        satisfied = input("\nDo you like this password? (yes/no): ").lower()
        if satisfied == "yes":
            save = input("\nDo you want to save this password? (yes/no): ").lower()
            if save == "yes":
                save_password(username, password, password_dict)
            break  
        
    while True:
        retrieve = input("\nDo you want to retrieve a password? (yes/no): ").lower()
        if retrieve == "yes":
            user_to_retrieve = input("\nEnter the username to retrieve the password: ")
            retrieved_password = retrieve_password(user_to_retrieve, password_dict)
            print(f"Password for {user_to_retrieve}: {retrieved_password}")
        else:
            break

if __name__ == "__main__":
    main()
